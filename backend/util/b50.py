# TODO: Implement b50 table generation functions
import json

from PIL import Image, ImageDraw, ImageFont, ImageOps, ImageFilter

from typing import List, Type, Tuple
from ..model.schemas import PlayRecordInfo


def generate_b50_img(play_records: list[PlayRecordInfo],
                 credential_info: str = "Generated by PRP-API",
                 config_path: str = "resources/image/template/b50_ruins_template.json"):
    b35, b15 = [], []
    b35_ra, b15_ra = 0, 0
    for record in play_records:
        if record.song_level.b15:
            b15_ra += record.rating
            b15.append(record)
        else:
            b35_ra += record.rating
            b35.append(record)

    b50_ra = b35_ra + b15_ra / 5000
    b35_ra /= 3500
    b15_ra /= 1500
    username = play_records[0].username

    # Generate Image process
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    template = Image.open(config.file).convert("RGBA")
    font = ImageFont.truetype(config.font)
    draw = ImageDraw.Draw(template)
    text_rgba = tuple(config.text_rgba)

    # Draw credential
    font.size = config.generated_by.font_size
    draw.multiline_text((config.generated_by.x, config.generated_by.y), credential_info,
                        font=font, fill=text_rgba, anchor=config.generated_by.anchor)
    # Draw username
    font.size = config.username.font_size
    draw.multiline_text((config.username.x, config.username.y), username,
                        font=font, fill=text_rgba, anchor=config.username.anchor)

    # Draw rating
    font.size = config.rating.font_size
    draw.multiline_text((config.rating.x, config.rating.y), "%.4f" % b50_ra,
                        font=font, fill=text_rgba, anchor=config.rating.anchor)
    font.size = config.b35.font_size
    draw.multiline_text((config.b35_rating.x, config.b35_rating.y), "%.4f" % b35_ra,
                        font=font, fill=text_rgba, anchor=config.rating.b35.anchor)
    font.size = config.b15.font_size
    draw.multiline_text((config.b15_rating.x, config.b15_rating.y), "%.4f" % b15_ra,
                        font=font, fill=text_rgba, anchor=config.rating.b15.anchor)

    # Draw single
    x_offset = config.b35_offset.x
    y_offset = config.b35_offset.y
    for i, record in enumerate(b35):
        cover_path = 'resources/image/cover/' + record.song_level.cover
        cover = Image.open(cover_path)
        cover = ImageOps.fit(cover, (config.single.width, config.single.height))
        cover = cover.filter(ImageFilter.GaussianBlur(radius=5))
        single_draw = ImageDraw.Draw(cover)
        single_draw.multiline_text((config.single.title.x, config.single.title.y),
                                   text=record.song_level.title, fill=text_rgba,
                                   anchor=config.single.title.anchor)
        single_draw.multiline_text()


def json2csv(play_records: list[PlayRecordInfo]):
    # TODO: json to .csv file
    pass


def csv2json(username: str):
    # TODO: .csv file to json
    pass


def generate_empty_csv():
    # TODO: generate an empty .csv file
    pass
